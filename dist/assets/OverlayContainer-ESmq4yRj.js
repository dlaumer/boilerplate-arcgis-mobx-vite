import{r,jC as z,jD as R,jE as X,$ as Y,ad as J,ab as G,jl as V,ag as Z,jm as tt,jn as et,jo as st,jp as ot,jq as it,jr as rt,js as at,b2 as nt,jF as pt,jG as q}from"./index-PAhymuf7.js";import{r as dt}from"./vec3f32-nZdmKIgz.js";import{n as ht}from"./WGLContainer-PaIHHyP7.js";import{o as lt}from"./FeatureCommandQueue-C4iDzwLi.js";import{t as L}from"./utils-ehcGqGxa.js";import{j as ut,_ as A,p as ct,X as ft,C as w,Y as vt,a as mt,w as yt,h as U,g as n,r as gt,U as wt,m as B,b as xt,P as F,v as _t,t as Mt}from"./GraphShaderModule-D7-m9YCf.js";import{e as St}from"./TechniqueType-uMFRS8dR.js";import{t as W}from"./VertexElementDescriptor-BLyltQyJ.js";class P extends xt{}r([U(0,w)],P.prototype,"pos",void 0),r([U(1,w)],P.prototype,"uv",void 0);class $t extends _t{}class N extends F{}r([n(gt)],N.prototype,"dvs",void 0);class m extends F{}r([n(w)],m.prototype,"perspective",void 0),r([n(w)],m.prototype,"texSize",void 0),r([n(A)],m.prototype,"wrapAroundShift",void 0),r([n(A)],m.prototype,"opacity",void 0),r([n(wt)],m.prototype,"texture",void 0);class g extends ut{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new A(1).add(ct(t,this.config.perspective)),o=new ft(e.pos.add(new w(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new vt(i.xy.multiply(s),0,s)}}fragment(e){const t=mt(this.config.texture,e.uv).multiply(this.config.opacity),s=new yt;return s.fragColor=t,s}}r([n(N)],g.prototype,"transform",void 0),r([n(m)],g.prototype,"config",void 0),r([z(0,B(P))],g.prototype,"vertex",null),r([z(0,B($t))],g.prototype,"fragment",null);class jt extends Mt{constructor(){super(...arguments),this.type=St.Overlay,this._mesh=null,this.shaders={overlay:new g}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(L);const{isWrapAround:p,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...L,stencil:{write:!1,test:{compare:X.EQUAL,op:{fail:R.KEEP,zFail:R.KEEP,zPass:R.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),p&&(c.wrapAroundShift=u,o.submitDrawMeshUntyped(s,f,i))}shutdown(){Y(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:{data:t.position,attributes:[new W("pos",2,G.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new W("uv",2,G.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:J.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class It extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=V(),this._overlayTechnique=new jt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==Z.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:p,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const x=q(u),d=i*o[0],v=i*o[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=p*d,j=p*v,a=et(this._dvsMat3);st(a,a,f),ot(a,a,it(d/2,v/2)),rt(a,a,dt(d/$,-v/j,1)),at(a,a,-x),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:p,size:u,viewpoint:c}=s,f=this._localOrigin;let x,d=0;const v=nt(i);if(v&&i.isWrappable){const y=u[0],S=u[1],_=q(o),$=Math.abs(Math.cos(_)),j=Math.abs(Math.sin(_)),a=Math.round(y*$+S*j),[C,D]=v.valid,h=pt(i),{x:I,y:K}=c.targetGeometry,k=[I,K],b=[0,0];s.toScreen(b,k);const M=[0,0];let O;O=a>p?.5*p:.5*a;const T=Math.floor((I+.5*h)/h),H=C+T*h,Q=D+T*h,E=[b[0]+O,0];s.toMap(M,E),M[0]>Q&&(d=h),E[0]=b[0]-O,s.toMap(M,E),M[0]<H&&(d=-h),x={worldWidth:h,xBounds:[C,D]}}for(const y of t)y.updateDrawCoords(f,d,i,x)}}export{It as u};
