import{cG as T,cH as _,fu as S,fG as D,fv as L,fw as v,fx as A,fH as E,V as m,Q as I,f_ as N,cN as C,s as w,c2 as u,f$ as $,O as g,f0 as k,fS as G,fQ as b,fT as R,g0 as O,bf as U,bj as j,cI as F,r as o,l,bn as P,q as x,fF as z,t as H}from"./index-PAhymuf7.js";import{S as f,i as M,E as K,m as Q,h as V}from"./KnowledgeGraphSublayer-BUUcSsHD.js";import{I as q}from"./knowledgeGraphService-Cp0TkubR.js";import"./OptimizedFeature-DL1f172u.js";import"./memoryEstimations-CsRDpl56.js";import"./constants-B4mRqufT.js";import"./featureConversionUtils-Vb99EY1i.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./GraphicsLayer-DDBqgihS.js";import"./GraphQueryStreaming-B0ucbrT0.js";import"./FeatureStore-C9yCy_VG.js";import"./BoundsStore-Bi0tS0u5.js";import"./PooledRBush-BsvBK0UB.js";import"./timeSupport-CtKNpu9m.js";import"./queryUtils-ENA1BF09.js";import"./json-Wa8cmqdu.js";import"./optimizedFeatureQueryEngineAdapter-ENYwZtfX.js";import"./QueryEngine-Ccc13jex.js";import"./WhereClauseCache-BOgKODpj.js";import"./WhereClause-C8KlKOoq.js";import"./TimeOnly-aF9Tn6fb.js";import"./QueryEngineCapabilities-B_pTbIiR.js";import"./quantizationUtils-BGKUE1Kx.js";import"./utils-D_SnCRx-.js";import"./utils-D615TF1y.js";import"./utils-hSE5r_SA.js";import"./ClassBreaksDefinition-CbxUFveV.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-Dsia34av.js";import"./clientSideDefaults-Dn0sYs4w.js";import"./utils-Drzin8x5.js";import"./cimSymbolUtils-BlcBc1Uq.js";import"./networkEnums-RoVYJsQa.js";import"./GPMessage-C_EdDTWZ.js";let n=class extends T(_(S(D(L(v(A(E(F)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(m.ofType(f)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(m.ofType(f)),this.type="knowledge-graph",this.url=null,this.addHandles(I(()=>this.layers.concat(this.tables),(t,i)=>this._handleSublayersChange(t,i),N))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(t){C(t)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await M(this)}async _fetchMetadata(){if(!this.url)throw new w("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await q(this.url);this.knowledgeGraph=e,this._forEachGraphType(t=>{t.name&&this._graphTypeLookup.set(t.name,t)})}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===u.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new K({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await Q(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(t=>{const i=this._graphTypeLookup.get(t.graphTypeName);i&&!e.namedTypeDefinitions.has(i.name)&&e.namedTypeDefinitions.set(i.name,{useAllData:!0})}),this.setAtOrigin("inclusionModeDefinition",e,$(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:t}=e;if((t==null?void 0:t.size)>0)t.forEach((i,a)=>{const s=this._graphTypeLookup.get(a);if(!s)return g.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void t.delete(a);s.type!=="relationship"&&s.type!=="entity"&&(g.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),t.delete(a))});else if(!e.generateAllSublayers)throw new w("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){var s,r;let e=[],t=[];const{inclusionModeDefinition:i}=this,a=i==null?void 0:i.namedTypeDefinitions;!i||i.generateAllSublayers?(e=((s=this.knowledgeGraph.dataModel)==null?void 0:s.entityTypes)??[],t=((r=this.knowledgeGraph.dataModel)==null?void 0:r.relationshipTypes)??[]):a&&a.size>0&&a.forEach((p,d)=>{const h=this._graphTypeLookup.get(d);switch(h==null?void 0:h.type){case"relationship":t.push(h);break;case"entity":e.push(h)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=t}_forEachGraphType(e){var t,i;[...((t=this.knowledgeGraph.dataModel)==null?void 0:t.entityTypes)??[],...((i=this.knowledgeGraph.dataModel)==null?void 0:i.relationshipTypes)??[]].forEach(a=>{e(a)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const i of e)this.sublayerIdsCache.has(i.typeName)||(this.sublayerIdsCache.set(i.typeName,new Set),t.push(i.typeName)),this.sublayerIdsCache.get(i.typeName).add(i.id);for(const i of t){const a=this._graphTypeLookup.get(i);a&&(this._addSublayer(a),a.type==="entity"?this.dataManager.entityTypeNames.add(i):this.dataManager.relationshipTypeNames.add(i),this.dataManager.sublayerCaches.set(i,new Map))}await M(this,t),this._refreshNamedTypes()}_createSublayers(e,t,i){e.forEach(a=>{const s=this._createSublayer(a);i(s)&&t.push(s),this._updateSublayerCaches(a)})}_addSublayer(e){const t=this._createSublayer(e);return t.geometryType?this.layers.push(t):this.tables.push(t),t}_createSublayer(e){return new f({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,t){t.forEach(i=>{i.parentCompositeLayer=this;const a=e.find(s=>s.type===i.graphType&&s.name===i.graphTypeName);a&&(i.objectType=a,this._updateSublayerCaches(a))})}_updateSublayerCaches(e){const t=this.dataManager.sublayerCaches;t.has(e.name)||t.set(e.name,new Map)}_saveUrlAsNewResource(e,t,i,a){e[t]="<pending>",i.pendingOperations.push(B(this.inclusionModeDefinition).then(s=>{const r=Y(a);e[t]=r.itemRelativeUrl,i.toAdd.push({resource:r,content:{type:"blob",blob:s},compress:!1,finish:p=>{this.definitionSetMap=p.url}})}))}_displaysAllRecords(e){for(const[,{useAllData:t}]of e.namedTypeDefinitions)if(!t)return!1;return!0}_handleSublayersChange(e,t){t&&(t.forEach(i=>{i.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(i=>{i.parent=this}),this.addHandles([e.on("after-add",({item:i})=>{i.parent=this}),e.on("after-remove",({item:i})=>{i.parent=null})],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=u.PORTAL_ITEM&&e<u.USER}readDefinitionSetMap(e,t,i){return k(e,i)}writeDefinitionSetMap(e,t,i,a){const s=a==null?void 0:a.portalItem,r=a==null?void 0:a.resources,p=G(a==null?void 0:a.origin);if(!s||!r||p==null)return void(e&&(t[i]=b(e,a)));const{inclusionModeDefinition:d}=this;if(!d||this._displaysAllRecords(d))return void(this.definitionSetMap=null);const h=this.originIdOf("inclusionModeDefinition");if(h===u.USER||this._namedTypesModified||p<h)this._saveUrlAsNewResource(t,i,r,s);else if(p===h&&e){const c=b(e,a);R(c)?this._saveUrlAsNewResource(t,i,r,s):t[i]=c}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):g.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){var t,i;const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.originIdOf("layers")===u.DEFAULTS?this._createSublayers(e,this.layers,a=>!!a.geometryType):this._updateSublayers(e,this.layers),this.originIdOf("tables")===u.DEFAULTS?this._createSublayers(e,this.tables,a=>!a.geometryType):this._updateSublayers(e,this.tables),(i=(t=this.dataManager.inclusionModeDefinition)==null?void 0:t.namedTypeDefinitions)==null||i.forEach((a,s)=>{var p;const r=O(this.sublayerIdsCache,s,()=>new Set);(p=a.members)==null||p.forEach(d=>{r.add(d.id)})})}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async removeRecords(e){var i,a,s,r,p,d,h,c;await this.load();const t=[];for(const y of e)((s=(a=(i=this.dataManager.inclusionModeDefinition)==null?void 0:i.namedTypeDefinitions)==null?void 0:a.get(y.typeName))==null?void 0:s.useAllData)===!1&&((h=(d=(p=(r=this.dataManager.inclusionModeDefinition)==null?void 0:r.namedTypeDefinitions)==null?void 0:p.get(y.typeName))==null?void 0:d.members)!=null&&h.has(y.id))&&t.push(y);this.dataManager.removeFromLayer(t);for(const y of t)(c=this.sublayerIdsCache.get(y.typeName))==null||c.delete(y.id);return this._refreshNamedTypes(),t}};o([l()],n.prototype,"dataManager",void 0),o([l({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],n.prototype,"definitionSetMap",void 0),o([P("definitionSetMap")],n.prototype,"readDefinitionSetMap",null),o([x("definitionSetMap")],n.prototype,"writeDefinitionSetMap",null),o([l()],n.prototype,"inclusionModeDefinition",null),o([l()],n.prototype,"knowledgeGraph",void 0),o([l({type:m.ofType(f),json:{write:{ignoreOrigin:!0}}})],n.prototype,"layers",void 0),o([l()],n.prototype,"memberEntityTypes",void 0),o([l()],n.prototype,"memberRelationshipTypes",void 0),o([l({type:["KnowledgeGraphLayer"]})],n.prototype,"operationalLayerType",void 0),o([l()],n.prototype,"sublayerIdsCache",void 0),o([l({type:m.ofType(f),json:{write:{ignoreOrigin:!0}}})],n.prototype,"tables",void 0),o([l({json:{read:!1}})],n.prototype,"type",void 0),o([l(z)],n.prototype,"url",void 0),n=o([H("esri.layers.KnowledgeGraphLayer")],n);const Ne=n;async function B(e){const t=await V(e);return new Blob([t],{type:"application/x-protobuf"})}function Y(e){const t=`definitionSetMap-${U()}.dat`,i=j("knowledgeGraphLayer",t);return e.resourceFromPath(i)}export{Ne as default};
